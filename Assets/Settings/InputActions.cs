//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Dev.Input
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""29defe18-3600-4e51-b5ff-c1fe812faf33"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9682789f-15da-4d70-875e-9bb755ca12d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseAiming"",
                    ""type"": ""Value"",
                    ""id"": ""b70cd21f-c19c-49fa-a877-419e0f5af5ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GamepadAiming"",
                    ""type"": ""Value"",
                    ""id"": ""0a53012a-e1f9-45cc-abfe-989813128e26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7e1ea33a-c463-45eb-93e5-ce9a80095a1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HerdState"",
                    ""type"": ""Button"",
                    ""id"": ""b0a48a9b-e091-4a9c-b642-a116a1009648"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HerdTarget"",
                    ""type"": ""Button"",
                    ""id"": ""0266c747-f9fb-4ad5-92af-89a17a146ff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlingOrThrow"",
                    ""type"": ""Button"",
                    ""id"": ""d83f2647-332c-46cf-b0c9-2d74dc726ad2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""00df8dea-7879-4a60-8402-6af96e8bfa3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7b8b198-1939-4184-bbba-83c572c8d83b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f16b49ca-fd5f-4239-9ffe-bed1a8bd85af"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcea59c9-f4ab-4c4b-8859-2f8395e65655"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HerdState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""044737c2-666c-4a85-958e-b9a3b7078018"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HerdState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d8db2d-7ec0-435b-8e7e-04e7aba179a4"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""HerdTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f346e7d5-6a82-4bd4-bdc3-e5e10d6d3db6"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""HerdTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51fcaa5b-8445-4885-9ead-97386b629a0b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SlingOrThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5cbf7ac-bdf8-4f38-92b3-d8e17350b1fe"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SlingOrThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b42a32ec-1185-4246-a124-bcdf1c2a1ef5"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b1a514f-c258-4183-b4c9-e203c29da3d6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0117e009-d080-462f-89f1-e4aa30f127a5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""0eb59686-5e32-44d8-b39d-99742f4e08d9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""504a937b-4d85-4cc4-a75e-fa744ee87505"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa48525f-f962-462d-ae66-161f24d87497"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84288404-cb91-4ab2-8908-33aae92346b7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4ee7e47e-bb97-42cf-95b4-aee53ed4c48d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7fb40ee4-1213-431f-a93a-396ad569d628"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GamepadAiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""596b0e8b-43c7-4956-a29f-8a72f3b86a4a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseAiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""2c40f6d4-567b-4819-bb02-50c337249c06"",
            ""actions"": [
                {
                    ""name"": ""UI_Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f226ce94-efa8-4433-9172-00c11c075505"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI_Submit"",
                    ""type"": ""Button"",
                    ""id"": ""09238808-215c-4090-b124-c9a10076fd3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI_Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""a02e2600-3691-4ab2-bb46-5f6daa83c61a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD [Keyboard]"",
                    ""id"": ""5c22e469-1e62-47f8-9999-427f44bd3175"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UI_Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
            m_Gameplay_MouseAiming = m_Gameplay.FindAction("MouseAiming", throwIfNotFound: true);
            m_Gameplay_GamepadAiming = m_Gameplay.FindAction("GamepadAiming", throwIfNotFound: true);
            m_Gameplay_Interact = m_Gameplay.FindAction("Interact", throwIfNotFound: true);
            m_Gameplay_HerdState = m_Gameplay.FindAction("HerdState", throwIfNotFound: true);
            m_Gameplay_HerdTarget = m_Gameplay.FindAction("HerdTarget", throwIfNotFound: true);
            m_Gameplay_SlingOrThrow = m_Gameplay.FindAction("SlingOrThrow", throwIfNotFound: true);
            m_Gameplay_Menu = m_Gameplay.FindAction("Menu", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_UI_Movement = m_UI.FindAction("UI_Movement", throwIfNotFound: true);
            m_UI_UI_Submit = m_UI.FindAction("UI_Submit", throwIfNotFound: true);
            m_UI_UI_Cancel = m_UI.FindAction("UI_Cancel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_Movement;
        private readonly InputAction m_Gameplay_MouseAiming;
        private readonly InputAction m_Gameplay_GamepadAiming;
        private readonly InputAction m_Gameplay_Interact;
        private readonly InputAction m_Gameplay_HerdState;
        private readonly InputAction m_Gameplay_HerdTarget;
        private readonly InputAction m_Gameplay_SlingOrThrow;
        private readonly InputAction m_Gameplay_Menu;
        public struct GameplayActions
        {
            private @InputActions m_Wrapper;
            public GameplayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
            public InputAction @MouseAiming => m_Wrapper.m_Gameplay_MouseAiming;
            public InputAction @GamepadAiming => m_Wrapper.m_Gameplay_GamepadAiming;
            public InputAction @Interact => m_Wrapper.m_Gameplay_Interact;
            public InputAction @HerdState => m_Wrapper.m_Gameplay_HerdState;
            public InputAction @HerdTarget => m_Wrapper.m_Gameplay_HerdTarget;
            public InputAction @SlingOrThrow => m_Wrapper.m_Gameplay_SlingOrThrow;
            public InputAction @Menu => m_Wrapper.m_Gameplay_Menu;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                    @MouseAiming.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouseAiming;
                    @MouseAiming.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouseAiming;
                    @MouseAiming.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMouseAiming;
                    @GamepadAiming.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGamepadAiming;
                    @GamepadAiming.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGamepadAiming;
                    @GamepadAiming.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGamepadAiming;
                    @Interact.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnInteract;
                    @HerdState.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHerdState;
                    @HerdState.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHerdState;
                    @HerdState.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHerdState;
                    @HerdTarget.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHerdTarget;
                    @HerdTarget.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHerdTarget;
                    @HerdTarget.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHerdTarget;
                    @SlingOrThrow.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSlingOrThrow;
                    @SlingOrThrow.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSlingOrThrow;
                    @SlingOrThrow.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSlingOrThrow;
                    @Menu.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMenu;
                    @Menu.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMenu;
                    @Menu.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMenu;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @MouseAiming.started += instance.OnMouseAiming;
                    @MouseAiming.performed += instance.OnMouseAiming;
                    @MouseAiming.canceled += instance.OnMouseAiming;
                    @GamepadAiming.started += instance.OnGamepadAiming;
                    @GamepadAiming.performed += instance.OnGamepadAiming;
                    @GamepadAiming.canceled += instance.OnGamepadAiming;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @HerdState.started += instance.OnHerdState;
                    @HerdState.performed += instance.OnHerdState;
                    @HerdState.canceled += instance.OnHerdState;
                    @HerdTarget.started += instance.OnHerdTarget;
                    @HerdTarget.performed += instance.OnHerdTarget;
                    @HerdTarget.canceled += instance.OnHerdTarget;
                    @SlingOrThrow.started += instance.OnSlingOrThrow;
                    @SlingOrThrow.performed += instance.OnSlingOrThrow;
                    @SlingOrThrow.canceled += instance.OnSlingOrThrow;
                    @Menu.started += instance.OnMenu;
                    @Menu.performed += instance.OnMenu;
                    @Menu.canceled += instance.OnMenu;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_UI_Movement;
        private readonly InputAction m_UI_UI_Submit;
        private readonly InputAction m_UI_UI_Cancel;
        public struct UIActions
        {
            private @InputActions m_Wrapper;
            public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @UI_Movement => m_Wrapper.m_UI_UI_Movement;
            public InputAction @UI_Submit => m_Wrapper.m_UI_UI_Submit;
            public InputAction @UI_Cancel => m_Wrapper.m_UI_UI_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @UI_Movement.started -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Movement;
                    @UI_Movement.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Movement;
                    @UI_Movement.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Movement;
                    @UI_Submit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Submit;
                    @UI_Submit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Submit;
                    @UI_Submit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Submit;
                    @UI_Cancel.started -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Cancel;
                    @UI_Cancel.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Cancel;
                    @UI_Cancel.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnUI_Cancel;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @UI_Movement.started += instance.OnUI_Movement;
                    @UI_Movement.performed += instance.OnUI_Movement;
                    @UI_Movement.canceled += instance.OnUI_Movement;
                    @UI_Submit.started += instance.OnUI_Submit;
                    @UI_Submit.performed += instance.OnUI_Submit;
                    @UI_Submit.canceled += instance.OnUI_Submit;
                    @UI_Cancel.started += instance.OnUI_Cancel;
                    @UI_Cancel.performed += instance.OnUI_Cancel;
                    @UI_Cancel.canceled += instance.OnUI_Cancel;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnMouseAiming(InputAction.CallbackContext context);
            void OnGamepadAiming(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnHerdState(InputAction.CallbackContext context);
            void OnHerdTarget(InputAction.CallbackContext context);
            void OnSlingOrThrow(InputAction.CallbackContext context);
            void OnMenu(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnUI_Movement(InputAction.CallbackContext context);
            void OnUI_Submit(InputAction.CallbackContext context);
            void OnUI_Cancel(InputAction.CallbackContext context);
        }
    }
}
